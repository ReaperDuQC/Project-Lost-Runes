//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputActions/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""217386bf-b351-4ee0-aefb-10dbd923707b"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""47f98b00-21fc-42f0-9fc1-ce63297e8b82"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Camera"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e89dba49-d8dd-4745-b485-89bb2fc6d02c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LockOnTargetLeft"",
                    ""type"": ""Button"",
                    ""id"": ""db738371-49e6-4677-a822-5fd2773dd47e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LockOnTargetRight"",
                    ""type"": ""Button"",
                    ""id"": ""045e2865-19d2-4370-aa3e-89756cc44847"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""411d2d50-c867-4f69-97df-f91e2855ced3"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f8881e4b-84d7-4bd1-8011-495bdbc84ea7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""353c35cc-9828-4788-9e36-b97bcec13bd8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f6495aaf-1079-48f3-a184-c50362cbcd8e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7a2e30c2-a308-4d16-8382-64000c176170"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8eb0fe27-3153-4ed4-b62d-690b2e75df6b"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Controller"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f0b2ffb-72dd-4275-99a9-1bee53a7a484"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Controller"",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79aa114a-c864-44ac-91ac-80971c61f74d"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df6e9426-92ea-4fe3-b6bd-e3ba8b5a5384"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""LockOnTargetLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""538ce71a-3ff3-4c79-934a-589bfb2775f5"",
                    ""path"": ""<Mouse>/backButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""LockOnTargetLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""abbf9845-3fdf-4e03-84bd-c88e244ccbb9"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""LockOnTargetRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f780329f-5562-4735-964a-f4e8d9de226a"",
                    ""path"": ""<Mouse>/forwardButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""LockOnTargetRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerActions"",
            ""id"": ""273b1fbe-8d7d-4a39-86a2-3ded50bfba44"",
            ""actions"": [
                {
                    ""name"": ""Right_Light_Attack"",
                    ""type"": ""Button"",
                    ""id"": ""acf05fd0-72bd-4f57-96b2-8351aa02afa4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right_Strong_Attack"",
                    ""type"": ""Button"",
                    ""id"": ""77e63236-33ab-44e1-9a7c-997243e15276"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left_Light_Attack"",
                    ""type"": ""Button"",
                    ""id"": ""c1ecff8a-7414-4d44-a713-033b84257fde"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left_Strong_Attack"",
                    ""type"": ""Button"",
                    ""id"": ""bc00f8a1-80d0-4e93-b50b-52cf6c2874b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""196b225e-586b-4619-bd6e-83447c2e62f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Toggle_TwoHand"",
                    ""type"": ""Button"",
                    ""id"": ""3078c0dd-04b1-42eb-9338-01b8c81bc8b1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""53f3a730-dbff-45a8-9460-ce3d16c65a4b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""af6488f7-08c2-4118-8cda-d09659f225a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Use_Consumable"",
                    ""type"": ""Button"",
                    ""id"": ""a73f9a33-0a5c-45ce-9836-1004012730ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LockOn"",
                    ""type"": ""Button"",
                    ""id"": ""5ce080dc-e091-40be-9018-86eaf9634c77"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""9243220e-2336-48db-865e-f017eda34b42"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""34d17ba5-2dd7-4a0e-afe4-4479f771644b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8aa9a504-c9b5-4c23-9d4a-b2cacf234182"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Right_Light_Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23dce910-326c-4691-90d2-e224c55e19d8"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Right_Light_Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6fc9568e-14e8-4ccd-813f-ed8ef26665ff"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Right_Strong_Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ecb88c1-3df3-4cb8-bf24-ebf50d4adca9"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Right_Strong_Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c0a4156-1604-4a3a-91b0-f9d1e9c6e618"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13d9c441-dc73-4ebd-98cd-60940294c730"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f5ecf88-6ad1-49de-a15b-9dce337f6211"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""LockOn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a38a631-dfce-4380-845a-6e5bafe24eb1"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""LockOn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a272e19-7c4e-4cfc-8f0d-a4333d316390"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cbe8d020-0826-43d8-a856-dba1d7f68dab"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6c80f2d-84d3-4856-be25-090f24f679e1"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35972e73-f9c9-457a-9b5a-56edd89f40a4"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4b1b54f-28b5-4d7a-978c-b16da0c3352c"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Left_Light_Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6098c88d-4316-489f-b8b1-5ac9cb6f32a2"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Left_Light_Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e038a288-0e7d-404d-89b5-c23d0ccce849"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Left_Strong_Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa1a5d51-a2ff-4895-bfa9-987115a2c49b"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Left_Strong_Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a78253aa-3bf6-4e42-8b39-0b86686568d5"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea6bec04-f3b3-4610-8912-c15323080a62"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eeb06187-77ee-412c-ba49-4f7ab3b19e5b"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Use_Consumable"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e77c85e5-61b0-4bce-8648-ad2be22a3d3e"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Use_Consumable"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f264d60b-4726-4de5-a7a3-6b4c9c5ed214"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6434ca5d-2817-4bb3-8fad-c21998b4dc62"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d92c20e-5624-46c0-9fd2-a687358e5457"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle_TwoHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerQuickSlots"",
            ""id"": ""2a1e421b-7de7-45bb-a5d3-104b44e4bb11"",
            ""actions"": [
                {
                    ""name"": ""D-Pad_Up"",
                    ""type"": ""Button"",
                    ""id"": ""da698ab6-c542-4cd0-9f05-d1ac10e76a1d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""D-Pad_Down"",
                    ""type"": ""Button"",
                    ""id"": ""e8e1fe09-d284-4bdd-8135-1253b31f4044"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""D-Pad_Left"",
                    ""type"": ""Button"",
                    ""id"": ""b3988de9-c257-425d-bc4b-64ba5bf83e7a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""D-Pad_Right"",
                    ""type"": ""Button"",
                    ""id"": ""4e47d0bb-879e-4716-8e94-8e1fcfa6d1fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1e0f6a2f-7d3f-458e-9d35-0bc06dc0a860"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""D-Pad_Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97e80344-8211-4a2c-9cbb-81503c0f7962"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""D-Pad_Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a458d23-8ec5-43f2-8fa7-7843ff635f4f"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""D-Pad_Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2fc6c22e-f2b5-46ca-a5ad-4321afadb9c5"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""D-Pad_Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""865f7224-2c1d-429b-98be-458c07f0f1a1"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""D-Pad_Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94b458fd-275f-4b1a-9ff5-8fc274bd10c9"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""D-Pad_Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7eb54408-dc7f-496c-9a64-0efa87dddf27"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""D-Pad_Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2cf44306-01d2-4998-b0a4-cdd13f55e250"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""D-Pad_Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MainMenu"",
            ""id"": ""3f6e2571-3fe6-47dd-8a0e-428fee31c151"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""bd00f18c-f9bb-458b-a080-e70b49af8382"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AutoRoll"",
                    ""type"": ""Button"",
                    ""id"": ""76bcc16c-f62e-4038-b94d-a085a63972a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""22303bcb-b636-4830-b455-e0fae0e6e04b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""591290c9-c3e2-4003-bf25-6a34eed8cce4"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c23b76c9-7c03-411c-a354-08c3cb7fd060"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13a39edb-f132-4d5c-9f1c-e5638d9b620e"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""AutoRoll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c3cf775-8266-43cb-99fe-84a3d8506a8e"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""AutoRoll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""515da05d-09f2-4ea5-97d3-382c440cee80"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19cdd696-4dfc-4c61-8f28-1385eedf3c0f"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CharacterShowRoom"",
            ""id"": ""645784b8-5014-40f9-948a-9e60b0fd180d"",
            ""actions"": [
                {
                    ""name"": ""Next"",
                    ""type"": ""Button"",
                    ""id"": ""df510894-adee-43e8-9a47-b53a6fa31342"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Previous"",
                    ""type"": ""Button"",
                    ""id"": ""a6beec50-1303-4bdb-814e-a49ee3239a87"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Offset"",
                    ""type"": ""PassThrough"",
                    ""id"": ""24bdb2fb-f171-4404-a8f1-e9d57d17cdd2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""64d1130b-35c5-4e00-81aa-bec8f238d2a0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7924a652-1aa7-41f5-aabb-0d150dbd5617"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee83ab15-65a1-4f43-82bd-ae864e923172"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Previous"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b00306d3-464d-47f8-be5f-aac785ae2dd0"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Previous"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33ae5dc6-b850-41c2-addb-6b06a89f4d3a"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Offset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Mouse & Keyboard"",
            ""bindingGroup"": ""Mouse & Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_Movement = m_PlayerMovement.FindAction("Movement", throwIfNotFound: true);
        m_PlayerMovement_Camera = m_PlayerMovement.FindAction("Camera", throwIfNotFound: true);
        m_PlayerMovement_LockOnTargetLeft = m_PlayerMovement.FindAction("LockOnTargetLeft", throwIfNotFound: true);
        m_PlayerMovement_LockOnTargetRight = m_PlayerMovement.FindAction("LockOnTargetRight", throwIfNotFound: true);
        // PlayerActions
        m_PlayerActions = asset.FindActionMap("PlayerActions", throwIfNotFound: true);
        m_PlayerActions_Right_Light_Attack = m_PlayerActions.FindAction("Right_Light_Attack", throwIfNotFound: true);
        m_PlayerActions_Right_Strong_Attack = m_PlayerActions.FindAction("Right_Strong_Attack", throwIfNotFound: true);
        m_PlayerActions_Left_Light_Attack = m_PlayerActions.FindAction("Left_Light_Attack", throwIfNotFound: true);
        m_PlayerActions_Left_Strong_Attack = m_PlayerActions.FindAction("Left_Strong_Attack", throwIfNotFound: true);
        m_PlayerActions_Interact = m_PlayerActions.FindAction("Interact", throwIfNotFound: true);
        m_PlayerActions_Toggle_TwoHand = m_PlayerActions.FindAction("Toggle_TwoHand", throwIfNotFound: true);
        m_PlayerActions_Jump = m_PlayerActions.FindAction("Jump", throwIfNotFound: true);
        m_PlayerActions_Roll = m_PlayerActions.FindAction("Roll", throwIfNotFound: true);
        m_PlayerActions_Use_Consumable = m_PlayerActions.FindAction("Use_Consumable", throwIfNotFound: true);
        m_PlayerActions_LockOn = m_PlayerActions.FindAction("LockOn", throwIfNotFound: true);
        m_PlayerActions_Start = m_PlayerActions.FindAction("Start", throwIfNotFound: true);
        m_PlayerActions_Select = m_PlayerActions.FindAction("Select", throwIfNotFound: true);
        // PlayerQuickSlots
        m_PlayerQuickSlots = asset.FindActionMap("PlayerQuickSlots", throwIfNotFound: true);
        m_PlayerQuickSlots_DPad_Up = m_PlayerQuickSlots.FindAction("D-Pad_Up", throwIfNotFound: true);
        m_PlayerQuickSlots_DPad_Down = m_PlayerQuickSlots.FindAction("D-Pad_Down", throwIfNotFound: true);
        m_PlayerQuickSlots_DPad_Left = m_PlayerQuickSlots.FindAction("D-Pad_Left", throwIfNotFound: true);
        m_PlayerQuickSlots_DPad_Right = m_PlayerQuickSlots.FindAction("D-Pad_Right", throwIfNotFound: true);
        // MainMenu
        m_MainMenu = asset.FindActionMap("MainMenu", throwIfNotFound: true);
        m_MainMenu_Select = m_MainMenu.FindAction("Select", throwIfNotFound: true);
        m_MainMenu_AutoRoll = m_MainMenu.FindAction("AutoRoll", throwIfNotFound: true);
        m_MainMenu_Back = m_MainMenu.FindAction("Back", throwIfNotFound: true);
        // CharacterShowRoom
        m_CharacterShowRoom = asset.FindActionMap("CharacterShowRoom", throwIfNotFound: true);
        m_CharacterShowRoom_Next = m_CharacterShowRoom.FindAction("Next", throwIfNotFound: true);
        m_CharacterShowRoom_Previous = m_CharacterShowRoom.FindAction("Previous", throwIfNotFound: true);
        m_CharacterShowRoom_Offset = m_CharacterShowRoom.FindAction("Offset", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private IPlayerMovementActions m_PlayerMovementActionsCallbackInterface;
    private readonly InputAction m_PlayerMovement_Movement;
    private readonly InputAction m_PlayerMovement_Camera;
    private readonly InputAction m_PlayerMovement_LockOnTargetLeft;
    private readonly InputAction m_PlayerMovement_LockOnTargetRight;
    public struct PlayerMovementActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerMovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerMovement_Movement;
        public InputAction @Camera => m_Wrapper.m_PlayerMovement_Camera;
        public InputAction @LockOnTargetLeft => m_Wrapper.m_PlayerMovement_LockOnTargetLeft;
        public InputAction @LockOnTargetRight => m_Wrapper.m_PlayerMovement_LockOnTargetRight;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
                @Camera.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnCamera;
                @Camera.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnCamera;
                @Camera.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnCamera;
                @LockOnTargetLeft.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnLockOnTargetLeft;
                @LockOnTargetLeft.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnLockOnTargetLeft;
                @LockOnTargetLeft.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnLockOnTargetLeft;
                @LockOnTargetRight.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnLockOnTargetRight;
                @LockOnTargetRight.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnLockOnTargetRight;
                @LockOnTargetRight.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnLockOnTargetRight;
            }
            m_Wrapper.m_PlayerMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Camera.started += instance.OnCamera;
                @Camera.performed += instance.OnCamera;
                @Camera.canceled += instance.OnCamera;
                @LockOnTargetLeft.started += instance.OnLockOnTargetLeft;
                @LockOnTargetLeft.performed += instance.OnLockOnTargetLeft;
                @LockOnTargetLeft.canceled += instance.OnLockOnTargetLeft;
                @LockOnTargetRight.started += instance.OnLockOnTargetRight;
                @LockOnTargetRight.performed += instance.OnLockOnTargetRight;
                @LockOnTargetRight.canceled += instance.OnLockOnTargetRight;
            }
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // PlayerActions
    private readonly InputActionMap m_PlayerActions;
    private IPlayerActionsActions m_PlayerActionsActionsCallbackInterface;
    private readonly InputAction m_PlayerActions_Right_Light_Attack;
    private readonly InputAction m_PlayerActions_Right_Strong_Attack;
    private readonly InputAction m_PlayerActions_Left_Light_Attack;
    private readonly InputAction m_PlayerActions_Left_Strong_Attack;
    private readonly InputAction m_PlayerActions_Interact;
    private readonly InputAction m_PlayerActions_Toggle_TwoHand;
    private readonly InputAction m_PlayerActions_Jump;
    private readonly InputAction m_PlayerActions_Roll;
    private readonly InputAction m_PlayerActions_Use_Consumable;
    private readonly InputAction m_PlayerActions_LockOn;
    private readonly InputAction m_PlayerActions_Start;
    private readonly InputAction m_PlayerActions_Select;
    public struct PlayerActionsActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActionsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Right_Light_Attack => m_Wrapper.m_PlayerActions_Right_Light_Attack;
        public InputAction @Right_Strong_Attack => m_Wrapper.m_PlayerActions_Right_Strong_Attack;
        public InputAction @Left_Light_Attack => m_Wrapper.m_PlayerActions_Left_Light_Attack;
        public InputAction @Left_Strong_Attack => m_Wrapper.m_PlayerActions_Left_Strong_Attack;
        public InputAction @Interact => m_Wrapper.m_PlayerActions_Interact;
        public InputAction @Toggle_TwoHand => m_Wrapper.m_PlayerActions_Toggle_TwoHand;
        public InputAction @Jump => m_Wrapper.m_PlayerActions_Jump;
        public InputAction @Roll => m_Wrapper.m_PlayerActions_Roll;
        public InputAction @Use_Consumable => m_Wrapper.m_PlayerActions_Use_Consumable;
        public InputAction @LockOn => m_Wrapper.m_PlayerActions_LockOn;
        public InputAction @Start => m_Wrapper.m_PlayerActions_Start;
        public InputAction @Select => m_Wrapper.m_PlayerActions_Select;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActionsActions instance)
        {
            if (m_Wrapper.m_PlayerActionsActionsCallbackInterface != null)
            {
                @Right_Light_Attack.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRight_Light_Attack;
                @Right_Light_Attack.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRight_Light_Attack;
                @Right_Light_Attack.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRight_Light_Attack;
                @Right_Strong_Attack.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRight_Strong_Attack;
                @Right_Strong_Attack.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRight_Strong_Attack;
                @Right_Strong_Attack.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRight_Strong_Attack;
                @Left_Light_Attack.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnLeft_Light_Attack;
                @Left_Light_Attack.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnLeft_Light_Attack;
                @Left_Light_Attack.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnLeft_Light_Attack;
                @Left_Strong_Attack.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnLeft_Strong_Attack;
                @Left_Strong_Attack.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnLeft_Strong_Attack;
                @Left_Strong_Attack.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnLeft_Strong_Attack;
                @Interact.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnInteract;
                @Toggle_TwoHand.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnToggle_TwoHand;
                @Toggle_TwoHand.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnToggle_TwoHand;
                @Toggle_TwoHand.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnToggle_TwoHand;
                @Jump.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnJump;
                @Roll.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRoll;
                @Roll.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRoll;
                @Roll.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRoll;
                @Use_Consumable.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnUse_Consumable;
                @Use_Consumable.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnUse_Consumable;
                @Use_Consumable.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnUse_Consumable;
                @LockOn.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnLockOn;
                @LockOn.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnLockOn;
                @LockOn.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnLockOn;
                @Start.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnStart;
                @Start.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnStart;
                @Start.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnStart;
                @Select.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnSelect;
            }
            m_Wrapper.m_PlayerActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Right_Light_Attack.started += instance.OnRight_Light_Attack;
                @Right_Light_Attack.performed += instance.OnRight_Light_Attack;
                @Right_Light_Attack.canceled += instance.OnRight_Light_Attack;
                @Right_Strong_Attack.started += instance.OnRight_Strong_Attack;
                @Right_Strong_Attack.performed += instance.OnRight_Strong_Attack;
                @Right_Strong_Attack.canceled += instance.OnRight_Strong_Attack;
                @Left_Light_Attack.started += instance.OnLeft_Light_Attack;
                @Left_Light_Attack.performed += instance.OnLeft_Light_Attack;
                @Left_Light_Attack.canceled += instance.OnLeft_Light_Attack;
                @Left_Strong_Attack.started += instance.OnLeft_Strong_Attack;
                @Left_Strong_Attack.performed += instance.OnLeft_Strong_Attack;
                @Left_Strong_Attack.canceled += instance.OnLeft_Strong_Attack;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Toggle_TwoHand.started += instance.OnToggle_TwoHand;
                @Toggle_TwoHand.performed += instance.OnToggle_TwoHand;
                @Toggle_TwoHand.canceled += instance.OnToggle_TwoHand;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
                @Use_Consumable.started += instance.OnUse_Consumable;
                @Use_Consumable.performed += instance.OnUse_Consumable;
                @Use_Consumable.canceled += instance.OnUse_Consumable;
                @LockOn.started += instance.OnLockOn;
                @LockOn.performed += instance.OnLockOn;
                @LockOn.canceled += instance.OnLockOn;
                @Start.started += instance.OnStart;
                @Start.performed += instance.OnStart;
                @Start.canceled += instance.OnStart;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
            }
        }
    }
    public PlayerActionsActions @PlayerActions => new PlayerActionsActions(this);

    // PlayerQuickSlots
    private readonly InputActionMap m_PlayerQuickSlots;
    private IPlayerQuickSlotsActions m_PlayerQuickSlotsActionsCallbackInterface;
    private readonly InputAction m_PlayerQuickSlots_DPad_Up;
    private readonly InputAction m_PlayerQuickSlots_DPad_Down;
    private readonly InputAction m_PlayerQuickSlots_DPad_Left;
    private readonly InputAction m_PlayerQuickSlots_DPad_Right;
    public struct PlayerQuickSlotsActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerQuickSlotsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @DPad_Up => m_Wrapper.m_PlayerQuickSlots_DPad_Up;
        public InputAction @DPad_Down => m_Wrapper.m_PlayerQuickSlots_DPad_Down;
        public InputAction @DPad_Left => m_Wrapper.m_PlayerQuickSlots_DPad_Left;
        public InputAction @DPad_Right => m_Wrapper.m_PlayerQuickSlots_DPad_Right;
        public InputActionMap Get() { return m_Wrapper.m_PlayerQuickSlots; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerQuickSlotsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerQuickSlotsActions instance)
        {
            if (m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface != null)
            {
                @DPad_Up.started -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDPad_Up;
                @DPad_Up.performed -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDPad_Up;
                @DPad_Up.canceled -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDPad_Up;
                @DPad_Down.started -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDPad_Down;
                @DPad_Down.performed -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDPad_Down;
                @DPad_Down.canceled -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDPad_Down;
                @DPad_Left.started -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDPad_Left;
                @DPad_Left.performed -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDPad_Left;
                @DPad_Left.canceled -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDPad_Left;
                @DPad_Right.started -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDPad_Right;
                @DPad_Right.performed -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDPad_Right;
                @DPad_Right.canceled -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDPad_Right;
            }
            m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @DPad_Up.started += instance.OnDPad_Up;
                @DPad_Up.performed += instance.OnDPad_Up;
                @DPad_Up.canceled += instance.OnDPad_Up;
                @DPad_Down.started += instance.OnDPad_Down;
                @DPad_Down.performed += instance.OnDPad_Down;
                @DPad_Down.canceled += instance.OnDPad_Down;
                @DPad_Left.started += instance.OnDPad_Left;
                @DPad_Left.performed += instance.OnDPad_Left;
                @DPad_Left.canceled += instance.OnDPad_Left;
                @DPad_Right.started += instance.OnDPad_Right;
                @DPad_Right.performed += instance.OnDPad_Right;
                @DPad_Right.canceled += instance.OnDPad_Right;
            }
        }
    }
    public PlayerQuickSlotsActions @PlayerQuickSlots => new PlayerQuickSlotsActions(this);

    // MainMenu
    private readonly InputActionMap m_MainMenu;
    private IMainMenuActions m_MainMenuActionsCallbackInterface;
    private readonly InputAction m_MainMenu_Select;
    private readonly InputAction m_MainMenu_AutoRoll;
    private readonly InputAction m_MainMenu_Back;
    public struct MainMenuActions
    {
        private @PlayerControls m_Wrapper;
        public MainMenuActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_MainMenu_Select;
        public InputAction @AutoRoll => m_Wrapper.m_MainMenu_AutoRoll;
        public InputAction @Back => m_Wrapper.m_MainMenu_Back;
        public InputActionMap Get() { return m_Wrapper.m_MainMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainMenuActions set) { return set.Get(); }
        public void SetCallbacks(IMainMenuActions instance)
        {
            if (m_Wrapper.m_MainMenuActionsCallbackInterface != null)
            {
                @Select.started -= m_Wrapper.m_MainMenuActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_MainMenuActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_MainMenuActionsCallbackInterface.OnSelect;
                @AutoRoll.started -= m_Wrapper.m_MainMenuActionsCallbackInterface.OnAutoRoll;
                @AutoRoll.performed -= m_Wrapper.m_MainMenuActionsCallbackInterface.OnAutoRoll;
                @AutoRoll.canceled -= m_Wrapper.m_MainMenuActionsCallbackInterface.OnAutoRoll;
                @Back.started -= m_Wrapper.m_MainMenuActionsCallbackInterface.OnBack;
                @Back.performed -= m_Wrapper.m_MainMenuActionsCallbackInterface.OnBack;
                @Back.canceled -= m_Wrapper.m_MainMenuActionsCallbackInterface.OnBack;
            }
            m_Wrapper.m_MainMenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @AutoRoll.started += instance.OnAutoRoll;
                @AutoRoll.performed += instance.OnAutoRoll;
                @AutoRoll.canceled += instance.OnAutoRoll;
                @Back.started += instance.OnBack;
                @Back.performed += instance.OnBack;
                @Back.canceled += instance.OnBack;
            }
        }
    }
    public MainMenuActions @MainMenu => new MainMenuActions(this);

    // CharacterShowRoom
    private readonly InputActionMap m_CharacterShowRoom;
    private ICharacterShowRoomActions m_CharacterShowRoomActionsCallbackInterface;
    private readonly InputAction m_CharacterShowRoom_Next;
    private readonly InputAction m_CharacterShowRoom_Previous;
    private readonly InputAction m_CharacterShowRoom_Offset;
    public struct CharacterShowRoomActions
    {
        private @PlayerControls m_Wrapper;
        public CharacterShowRoomActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Next => m_Wrapper.m_CharacterShowRoom_Next;
        public InputAction @Previous => m_Wrapper.m_CharacterShowRoom_Previous;
        public InputAction @Offset => m_Wrapper.m_CharacterShowRoom_Offset;
        public InputActionMap Get() { return m_Wrapper.m_CharacterShowRoom; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterShowRoomActions set) { return set.Get(); }
        public void SetCallbacks(ICharacterShowRoomActions instance)
        {
            if (m_Wrapper.m_CharacterShowRoomActionsCallbackInterface != null)
            {
                @Next.started -= m_Wrapper.m_CharacterShowRoomActionsCallbackInterface.OnNext;
                @Next.performed -= m_Wrapper.m_CharacterShowRoomActionsCallbackInterface.OnNext;
                @Next.canceled -= m_Wrapper.m_CharacterShowRoomActionsCallbackInterface.OnNext;
                @Previous.started -= m_Wrapper.m_CharacterShowRoomActionsCallbackInterface.OnPrevious;
                @Previous.performed -= m_Wrapper.m_CharacterShowRoomActionsCallbackInterface.OnPrevious;
                @Previous.canceled -= m_Wrapper.m_CharacterShowRoomActionsCallbackInterface.OnPrevious;
                @Offset.started -= m_Wrapper.m_CharacterShowRoomActionsCallbackInterface.OnOffset;
                @Offset.performed -= m_Wrapper.m_CharacterShowRoomActionsCallbackInterface.OnOffset;
                @Offset.canceled -= m_Wrapper.m_CharacterShowRoomActionsCallbackInterface.OnOffset;
            }
            m_Wrapper.m_CharacterShowRoomActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Next.started += instance.OnNext;
                @Next.performed += instance.OnNext;
                @Next.canceled += instance.OnNext;
                @Previous.started += instance.OnPrevious;
                @Previous.performed += instance.OnPrevious;
                @Previous.canceled += instance.OnPrevious;
                @Offset.started += instance.OnOffset;
                @Offset.performed += instance.OnOffset;
                @Offset.canceled += instance.OnOffset;
            }
        }
    }
    public CharacterShowRoomActions @CharacterShowRoom => new CharacterShowRoomActions(this);
    private int m_ControllerSchemeIndex = -1;
    public InputControlScheme ControllerScheme
    {
        get
        {
            if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
            return asset.controlSchemes[m_ControllerSchemeIndex];
        }
    }
    private int m_MouseKeyboardSchemeIndex = -1;
    public InputControlScheme MouseKeyboardScheme
    {
        get
        {
            if (m_MouseKeyboardSchemeIndex == -1) m_MouseKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse & Keyboard");
            return asset.controlSchemes[m_MouseKeyboardSchemeIndex];
        }
    }
    public interface IPlayerMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnCamera(InputAction.CallbackContext context);
        void OnLockOnTargetLeft(InputAction.CallbackContext context);
        void OnLockOnTargetRight(InputAction.CallbackContext context);
    }
    public interface IPlayerActionsActions
    {
        void OnRight_Light_Attack(InputAction.CallbackContext context);
        void OnRight_Strong_Attack(InputAction.CallbackContext context);
        void OnLeft_Light_Attack(InputAction.CallbackContext context);
        void OnLeft_Strong_Attack(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnToggle_TwoHand(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnUse_Consumable(InputAction.CallbackContext context);
        void OnLockOn(InputAction.CallbackContext context);
        void OnStart(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
    }
    public interface IPlayerQuickSlotsActions
    {
        void OnDPad_Up(InputAction.CallbackContext context);
        void OnDPad_Down(InputAction.CallbackContext context);
        void OnDPad_Left(InputAction.CallbackContext context);
        void OnDPad_Right(InputAction.CallbackContext context);
    }
    public interface IMainMenuActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnAutoRoll(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
    }
    public interface ICharacterShowRoomActions
    {
        void OnNext(InputAction.CallbackContext context);
        void OnPrevious(InputAction.CallbackContext context);
        void OnOffset(InputAction.CallbackContext context);
    }
}
